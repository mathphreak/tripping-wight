ContinuousSyncedLoop playback an audio file synced to the global Engine position.
It does not accept events. It simply plays the audio pitched to adjust the Engine tempo.

keep a faux target

keep an output SignalBuffer

keep a real target to point to the faux target -- Andre Michelle says "FASTER ACCESS" but I don't get that

keep a generic audio decoder to hold the loop
keep the sample length of the loop
keep the bar length of the loop

to process a block:
	the loop start is the place prior to the beginning of the block where the loop would have started
	
	find the samples where the loop will start and end for this block
	
	the target position is the fractional part of the starting sample as it was calculated
	AM says "AUDIO WAS WRITTEN AT THE BEGINNING OF BYTEARRAY" but that isn't clear to me
	
	the sample rate is just how quickly we need to play through the loop
	
	calculate how many samples we need of the loop
	
	read that many samples into the target, looping the source if needed
	
	magically write all the output with the pitch shifting and such -- too tired to interpret it right now
	processNormal( signalOutput.current, targetPosition, sampleRate, info.numSignals );
}

/**
 * Writes synced audio to the current stream. Create another method for e.g. volume interpolation (if necessary)
 */
private function processNormal( current: Signal, position: Number, rate: Number, numSignals: int ): void
{
	var index: int;
	
	var l0: Number;
	var r0: Number;
	var l1: Number;
	var r1: Number;
	
	var alpha: Number;
	
	for( var i: int = 0 ; i < numSignals ; ++i )
	{
		index = position;
		
		//-- SET TARGET READ POSITION
		target.position = index << 3;

		//-- READ TWO STEREO SAMPLES FOR LINEAR INTERPOLATION
		l0 = target.readFloat();
		r0 = target.readFloat();

		l1 = target.readFloat();
		r1 = target.readFloat();

		//-- MIXING RATIO FOR INTERPOLATION
		alpha = position - Math.floor( position );

		//-- WRITE INTERPOLATED AMPLITUDES INTO SIGNALOUTPUT
		current.l = l0 + alpha * ( l1 - l0 );
		current.r = r0 + alpha * ( r1 - r0 );
		current = current.next;

		//-- INCREASE POSITION
		position += rate;
	}
}

/**
 * If position + total is greater then actual audio, it restarts from the beginning
 */
private function readAudioWrapped( total: int, position: int ): void
{
	target.position = 0;

	total -= _decoder.extract( TARGET, total, position );
	
	if( 0 < total ) // STILL SAMPLES NEEDED
	{
		_decoder.extract( TARGET, total, 0 );
	}
}
